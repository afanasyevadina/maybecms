<?php

namespace Tests\Unit;

use Altenic\MaybeCms\Factories\AttachmentFactory;
use Altenic\MaybeCms\Factories\BlockFactory;
use Altenic\MaybeCms\Factories\UserFactory;
use Altenic\MaybeCms\Models\Attachment;
use Altenic\MaybeCms\Models\Block;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class AttachmentTest extends TestCase
{
    use DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Storage::fake('testing');
    }

    public function test_create_attachment_unauthorized()
    {
        $this->postJson('/api/admin/attachments')
            ->assertForbidden()
            ->assertJson([
                'status' => 'error',
                'message' => 'Unauthorized',
            ]);
    }

    public function test_create_attachment_permission_denied()
    {
        $this->actingAs(app(UserFactory::class)->create(), 'sanctum');
        $this->postJson('/api/admin/attachments')
            ->assertForbidden()
            ->assertJson([
                'status' => 'error',
                'message' => 'Unauthorized',
            ]);
    }

    public function test_create_attachment_validation_failed_empty_body()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments')
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'attachable_id' => 'The attachable id field is required.',
                    'attachable_type' => 'The attachable type field is required.',
                    'file' => 'The file field is required.',
                    'type' => 'The type field is required.',
                ],
            ]);
    }

    public function test_create_attachment_validation_failed_incorrect_type()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments', [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'file'])->id,
            'type' => 'invalid-type',
            'file' => UploadedFile::fake()->create('fake.pdf'),
        ])
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'type' => 'The selected type is invalid.',
                ],
            ]);
    }

    public function test_create_attachment_validation_failed_incorrect_attachable_type()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments', [
            'attachable_type' => 'invalid-type',
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'file'])->id,
            'type' => 'file',
            'file' => UploadedFile::fake()->create('fake.pdf'),
        ])
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'attachable_type' => 'Attachable class not exists.',
                ],
            ]);
    }

    public function test_create_attachment_validation_failed_incorrect_attachable_id()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments', [
            'attachable_type' => Block::class,
            'attachable_id' => Block::max('id') + 1,
            'type' => 'file',
            'file' => UploadedFile::fake()->create('fake.pdf'),
        ])
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'attachable_id' => 'Attachable model not found.',
                ],
            ]);
    }

    public function test_create_attachment_validation_failed_incorrect_file()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments', [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'file'])->id,
            'type' => 'file',
            'file' => 'not-a-file',
        ])
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'file' => 'The file must be a file.',
                ],
            ]);
    }

    public function test_create_attachment_validation_failed_incorrect_image()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments', [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'image'])->id,
            'type' => 'image',
            'file' => UploadedFile::fake()->create('fake.pdf'),
        ])
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'file' => 'The file must be an image.',
                ],
            ]);
    }

    public function test_create_attachment_validation_failed_incorrect_video()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->postJson('/api/admin/attachments', [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'video'])->id,
            'type' => 'video',
            'file' => UploadedFile::fake()->create('fake.pdf'),
        ])
            ->assertStatus(422)
            ->assertJson([
                'status' => 'error',
                'message' => 'Validation error',
                'errors' => [
                    'file' => 'The file must be a file of type: video/*.',
                ],
            ]);
    }

    public function test_create_file_attachment_for_block_success()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $uploadedFile = UploadedFile::fake()->create('fake.pdf');
        $expectedPath = 'attachments/' . date('Y') . '/' . date('m') . '/' . date('d') . '/' . $uploadedFile->hashName();
        $data = [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'file'])->id,
            'type' => 'file',
            'file' => $uploadedFile,
        ];
        $this->postJson('/api/admin/attachments', $data)
            ->assertCreated()
            ->assertJson([
                'status' => 'success',
                'data' => [
                    'type' => $data['type'],
                    'path' => asset('storage/' . $expectedPath),
                    'disk' => 'public',
                    'mime' => $uploadedFile->getMimeType(),
                    'original_name' => $uploadedFile->getClientOriginalName(),
                    'size' => $uploadedFile->getSize(),
                    'active' => true,
                    'order' => 1,
                ],
            ]);
        $this->assertDatabaseHas((new Attachment)->getTable(), [
            'active' => 1,
            'user_id' => auth()->id(),
        ]);
        Storage::assertExists($expectedPath);
    }

    public function test_create_image_attachment_for_block_success()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $uploadedFile = UploadedFile::fake()->create('fake.jpg');
        $expectedPath = 'attachments/' . date('Y') . '/' . date('m') . '/' . date('d') . '/' . $uploadedFile->hashName();
        $data = [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'image'])->id,
            'type' => 'image',
            'file' => $uploadedFile,
        ];
        $this->postJson('/api/admin/attachments', $data)
            ->assertCreated()
            ->assertJson([
                'status' => 'success',
                'data' => [
                    'type' => $data['type'],
                    'path' => asset('storage/' . $expectedPath),
                    'disk' => 'public',
                    'mime' => $uploadedFile->getMimeType(),
                    'original_name' => $uploadedFile->getClientOriginalName(),
                    'size' => $uploadedFile->getSize(),
                    'active' => true,
                    'order' => 1,
                ],
            ]);
        $this->assertDatabaseHas((new Attachment)->getTable(), [
            'active' => 1,
            'user_id' => auth()->id(),
        ]);
        Storage::assertExists($expectedPath);
    }

    public function test_create_video_attachment_for_block_success()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $uploadedFile = UploadedFile::fake()->create('fake.mp4');
        $expectedPath = 'attachments/' . date('Y') . '/' . date('m') . '/' . date('d') . '/' . $uploadedFile->hashName();
        $data = [
            'attachable_type' => Block::class,
            'attachable_id' => app(BlockFactory::class)->create(['type' => 'video'])->id,
            'type' => 'video',
            'file' => $uploadedFile,
        ];
        $this->postJson('/api/admin/attachments', $data)
            ->assertCreated()
            ->assertJson([
                'status' => 'success',
                'data' => [
                    'type' => $data['type'],
                    'path' => asset('storage/' . $expectedPath),
                    'disk' => 'public',
                    'mime' => $uploadedFile->getMimeType(),
                    'original_name' => $uploadedFile->getClientOriginalName(),
                    'size' => $uploadedFile->getSize(),
                    'active' => true,
                    'order' => 1,
                    'poster' => null,
                ],
            ]);
        $this->assertDatabaseHas((new Attachment)->getTable(), [
            'active' => 1,
            'user_id' => auth()->id(),
        ]);
        Storage::assertExists($expectedPath);
    }

    public function test_delete_attachment_unauthorized()
    {
        $this->deleteJson('/api/admin/attachments/' . app(AttachmentFactory::class)->create()->id)
            ->assertForbidden()
            ->assertJson([
                'status' => 'error',
                'message' => 'Unauthorized',
            ]);
    }

    public function test_delete_attachment_permission_denied()
    {
        $this->actingAs(app(UserFactory::class)->create(), 'sanctum');
        $this->deleteJson('/api/admin/attachments/' . app(AttachmentFactory::class)->create()->id)
            ->assertForbidden()
            ->assertJson([
                'status' => 'error',
                'message' => 'Unauthorized',
            ]);
    }

    public function test_delete_attachment_not_found()
    {
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->deleteJson('/api/admin/attachments/' . Attachment::max('id') + 1)
            ->assertNotFound()
            ->assertJson([
                'status' => 'error',
                'message' => 'Not Found',
            ]);
    }

    public function test_delete_attachment_success()
    {
        $attachment = app(AttachmentFactory::class)->create();
        $this->actingAs(app(UserFactory::class)->admin()->create(), 'sanctum');
        $this->deleteJson('/api/admin/attachments/' . $attachment->id)
            ->assertNoContent();
        $this->assertDatabaseMissing((new Attachment)->getTable(), [
            'id' => $attachment->id,
        ]);
    }
}
